on:
  workflow_call:

env:
  DOTNET_TOOLS_PATH: ./dotnet-tools
  DOTNET_TOOLS_CACHE_KEY: cache-dotnet-tools

jobs:
  setup-java:
    runs-on: ubuntu-latest
    steps:
      - name: Install JDK
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: zulu

  setup-dotnet:
    runs-on: ubuntu-latest
    steps:
      - name: Install .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0
          dotnet-quality: ga
          cache: true

  setup-nsis:
    runs-on: ubuntu-latest
    steps:
    - name: Install NSIS
      run: |
        bash -c 'echo "deb http://ftp.debian.org/debian unstable main contrib non-free" >> /etc/apt/sources.list.d/unstable.list'
        apt-get -y update
        apt-get -y install -t unstable nsis
    - name: Print NSIS version
      run: makensis -VERSION
    - name: Print NSIS compile flags
      run: makensis -HDRINFO

  cache-dotnet-tools:
    runs-on: ubuntu-latest
    needs: setup-dotnet
    outputs:
      cache-hit: ${{ steps.cache-dotnet-tools.outputs.cache-hit }}
    steps:
      - name: Ensure tools directory exists
        shell: powershell
        run: New-Item -Path ${{ env.DOTNET_TOOLS_PATH }} -ItemType Directory -Force
      - name: Cache dotnet tools
        id: cache-dotnet-tools
        uses: actions/cache@v4
        with:
          path: ${{ env.DOTNET_TOOLS_PATH }}
          key: ${{ env.DOTNET_TOOLS_CACHE_KEY }}
          enableCrossOsArchive: true

  setup-dotnet-tools:
    runs-on: ubuntu-latest
    needs: cache-dotnet-tools
    if: needs.cache-dotnet-tools.outputs.cache-hit != 'true'
    steps:
      - name: Install dotnet-script
        run: dotnet tool update -g dotnet-script --tool-path ${{ env.DOTNET_TOOLS_PATH }}
      - name: Install dotnet-coverage
        run: dotnet tool update -g dotnet-coverage --tool-path ${{ env.DOTNET_TOOLS_PATH }}
      - name: Install dotnet-sonarscanner
        run: dotnet tool update -g dotnet-sonarscanner --tool-path ${{ env.DOTNET_TOOLS_PATH }}

  setup-sonar-scanner:
    runs-on: ubuntu-latest
    steps:
      - name: Cache SonarCloud packages
        uses: actions/cache@v4
        with:
          path: ~/sonar/cache
          key: ${{ runner.os }}-sonar

  build-test:
    runs-on: ubuntu-latest
    needs:
      - setup-java
      - setup-dotnet-tools
      - setup-sonar-scanner
    env:
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages
    strategy:
      matrix:
        build-config:
          - platform: win
          - platform: linux
          - platform: maccatalyst
        arch: [x86, x64, arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Build and Test
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        shell: powershell
        run: |
          ${{ env.DOTNET_TOOLS_PATH }}/dotnet-sonarscanner begin /k:"${{ github.event.organization.login }}_${{ github.event.repository.name }}" /o:"ktsu-io" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml
          dotnet build --no-incremental -r ${{ matrix.build-config.platform }}-${{ matrix.arch }} -f net.8.0
          ${{ env.DOTNET_TOOLS_PATH }}/dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
          ${{ env.DOTNET_TOOLS_PATH }}/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      - name: Build ${{ matrix.build-config.platform }}-${{ matrix.arch }} executable
        run: dotnet publish -o ./publish-${{ matrix.build-config.platform }}-${{ matrix.arch }} --self-contained -r ${{ matrix.build-config.platform }}-${{ matrix.arch }} -f net.8.0

  build-installer:
    runs-on: ubuntu-latest
    needs: 
      - build-test
      - setup-nsis
    steps:
      - name: Build NSIS installer
        run: makensis setup.nsi

  release:
    runs-on: ubuntu-latest
    needs: build-installer
    steps:
      - name: Read VERSION
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: ./VERSION
          trim: true
      - name: Release
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "setup.exe"
          tag: ${{ steps.version.outputs.content }}
          commit: main
          allowUpdates: false
          skipIfReleaseExists: true
          omitBody: true
          generateReleaseNotes: true
          replacesArtifacts: false
          makeLatest: true
