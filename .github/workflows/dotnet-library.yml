name: dotnet-library-pipeline

on:
  workflow_call:

jobs:
  dotnet-library-pipeline:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Fetch tags
        run: |
          git fetch --prune --unshallow --tags

      - name: Check branch
        run: |
          "IS_MAIN=" + ("${{ github.ref }}" -eq "refs/heads/main") | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          
      - name: Check tag
        continue-on-error: true
        run: |
          "IS_TAGGED=" + (git show-ref --tags -d | Out-String).Contains("${{ github.sha }}") | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Check release
        run: |
          "SHOULD_RELEASE=" + (($Env:IS_MAIN -eq "True") -AND ($Env:IS_TAGGED -eq "False")) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
          
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'zulu'
      
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            9.0.x
      
      - name: Install dotnet-script
        run: dotnet tool install -g dotnet-script

      - name: Get Version
        shell: pwsh
        run: |
          $version = (Get-Content -Path VERSION -Raw).Trim()
          # Get the last relevant commit that is not from a bot or application
          $lastRelevantCommit = git log -n 1 `
            --committer='^(?!.*\[bot\]|GitHub|ProjectDirector|SyncFileContents).*$' `
            --perl-regexp --format=format:%H `
            -- '*.*' ':!.*' `
            ':(icase,exclude)*.md' `
            ':(icase,exclude)*.yml' `
            ':(icase,exclude)*.yaml' `
            ':(icase,exclude)*.sln' `
            ':(icase,exclude)Directory.Build.*' `
            ':(icase,exclude)*.*proj'
          
          $wasLastRelevantCommitTagged = (git tag --contains $lastRelevantCommit).Length -gt 0
          $currentVersionIsAlpha = $version.Contains('alpha')
          
          $versionIncrement = 'minor'
          
          if ($wasLastRelevantCommitTagged) {
            $versionIncrement = 'patch'
          }
          
          if ($currentVersionIsAlpha) {
            $versionIncrement = 'prerelease'
          }
          
          Write-Host "Current version: $version"
          Write-Host "Last relevant commit: $lastRelevantCommit"
          Write-Host "Was last relevant commit tagged: $wasLastRelevantCommitTagged"
          Write-Host "Current version is alpha: $currentVersionIsAlpha"
          Write-Host "Increment by: $versionIncrement"
          "VERSION_INCREMENT=$versionIncrement" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Bump version
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        id: semver
        uses: nguyenvukhang/semver-increment@v1
        with:
          increment: ${{ env.VERSION_INCREMENT }}
          identifier: 'alpha'
          version-file: 'VERSION'
          version-regex: '^(.*)'

      - name: Return version
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        run: |
          "VERSION=${{ steps.semver.outputs.version }}" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append
      
      - name: Build
        run: dotnet build --no-incremental -m:1

      - name: Test
        run: dotnet test

      - name: Detect Dependencies
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        uses: advanced-security/component-detection-dependency-submission-action@v0.0.2
        
      - name: Build Package
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        run: dotnet pack --include-source --configuration Release --output . -p:SymbolPackageFormat=snupkg -p:PackageLicenseFile=LICENSE -p:PackageReadmeFile=README.md -p:RepositoryUrl=${{ github.server_url }}/${{ github.repository }} -p:RepositoryCommit=${{ github.sha }} -p:PackageProjectUrl=${{ github.server_url }}/${{ github.repository }} -p:IncludeContentInPack=true

      - name: Publish to GitHub
        if: ${{ env.SHOULD_RELEASE == 'True' && hashFiles('*.nupkg') != '' }}
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.GITHUB_TOKEN }} --source https://nuget.pkg.github.com/${{ github.repository_owner }}/index.json --skip-duplicate
      
      - name: Publish to NuGet
        if: ${{ env.SHOULD_RELEASE == 'True' && hashFiles('*.nupkg') != '' }}
        run: dotnet nuget push *.nupkg --api-key ${{ secrets.NUGET_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
      
      - name: Commit Version
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        id: auto-commit-action
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: 'Update VERSION to ${{ env.VERSION }}'
          file_pattern: 'VERSION'
        
      - name: Release
        if: ${{ env.SHOULD_RELEASE == 'True' }}
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.*nupkg"
          tag: v${{ env.VERSION }}
          commit: ${{ steps.auto-commit-action.outputs.commit_hash }}
          allowUpdates: false
          skipIfReleaseExists: true
          omitBody: true
          generateReleaseNotes: true
          replacesArtifacts: false
          makeLatest: true
